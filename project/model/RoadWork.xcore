
package emfer.examples.roadwork

class RoadMap
{
	contains Road road
	
	contains Car[] cars
	
	contains Signal westernSignal
	contains Signal easternSignal
	
	TravelDirection lastDirection = "UNDEFINED"
	
	op String toString()
	{
		var bufNorthSignal = new StringBuilder("       \n")
		var bufNorthCars =   new StringBuilder("-------\n")
		var bufSouthCars =   new StringBuilder("--/=\\--\n")
		var bufSouthSignal = new StringBuilder("       \n")
		
		if (lastDirection == TravelDirection.WEST)
		{
			bufSouthCars.setCharAt(3, '<')
		}

		if (lastDirection == TravelDirection.EAST)
		{
			bufSouthCars.setCharAt(3, '>')
		}

		if (easternSignal.pass)
		{
			bufNorthSignal.insert(5, "T"  + easternSignal.redCount)
		}
		else
		{
			bufNorthSignal.insert(5, "F" + easternSignal.redCount)			
		}
		
		if (westernSignal.pass)
		{
			bufSouthSignal.insert(1, "T" + westernSignal.redCount)
		}
		else
		{
			bufSouthSignal.insert(1, "F" + westernSignal.redCount)			
		}
		
		for (Car c : cars)
		{
			var char carChar = 'E'
			if (c.travelDirection == TravelDirection.WEST)
			{
				carChar = 'W'
			}
			
			var trackName = c.track.name
			var int index = trackName.charAt(1) - '1';

			if (trackName.startsWith("n"))
			{
				bufNorthCars.setCharAt(6 - index, carChar);
			}
			else
			{
				bufSouthCars.setCharAt(index, carChar);
			}
		}
		
		
		return "\n" + bufNorthSignal.append(bufNorthCars).append(bufSouthCars).append(bufSouthSignal).toString;
	}
}

class Road
{
	contains Track[] tracks
}

class Track
{
	String name
	TravelDirection travelDirection
	
	refers Track[] west opposite east
	refers Track[] east opposite west
	
	refers Signal signal opposite track
	
	refers Car car opposite track
	
	op String toString()
	{
		return name
	}
}

class Signal
{
	boolean pass
	
	int redCount = "0"
	
	refers Track track opposite signal
	
	op String toString() 
	{
		return ""+pass;
	}
}

class Car
{
	TravelDirection travelDirection
	
	refers Track track opposite car
	
	op String toString()
	{
		var String result = "" 
		
		if (track !== null)
		{
			result += "" + track
		}
		
		result += " " + travelDirection
		
		return result;
	}
}

enum TravelDirection
{
	UNDEFINED,
	EAST, 
	WEST
}