
package emfer.examples.roadwork

class RoadMap
{
	refers Road road
	
	refers Car[] cars
	
	refers Signal westernSignal
	refers Signal easternSignal
	
	op String toString()
	{
		var bufNorthSignal = new StringBuilder("       \n")
		var bufNorthCars = new StringBuilder("-------\n")
		var bufSouthCars = new StringBuilder("--/ \\--\n")
		var bufSouthSignal = new StringBuilder("       \n")
		
		if (easternSignal.pass)
		{
			bufNorthSignal.setCharAt(5, 'T')
		}
		else
		{
			bufNorthSignal.setCharAt(5, 'F')			
		}
		
		if (westernSignal.pass)
		{
			bufSouthSignal.setCharAt(1, 'T')
		}
		else
		{
			bufSouthSignal.setCharAt(1, 'F')			
		}
		
		for (Car c : cars)
		{
			var char carChar = 'E'
			if (c.travelDirection == TravelDirection.WEST)
			{
				carChar = 'W'
			}
			
			var trackName = c.track.name
			var int index = trackName.charAt(1) - '1';

			if (trackName.startsWith("n"))
			{
				bufNorthCars.setCharAt(6 - index, carChar);
			}
			else
			{
				bufSouthCars.setCharAt(index, carChar);
			}
		}
		
		
		return "\n" + bufNorthSignal.append(bufNorthCars).append(bufSouthCars).append(bufSouthSignal).toString;
	}
}

class Road
{
	contains Track[] tracks
}

class Track
{
	String name
	TravelDirection travelDirection
	
	refers Track[] west opposite east
	refers Track[] east opposite west
	
	op String toString()
	{
		return "Track: " + name
	}
}

class Signal
{
	boolean pass
	
	refers Track track
}

class Car
{
	TravelDirection travelDirection
	
	refers Track track
	
	op String toString()
	{
		var String result = "" 
		
		if (track !== null)
		{
			result += "at: " + track
		}
		
		result += " going " + travelDirection
		
		return result;
	}
}

enum TravelDirection
{
	UNDEFINED,
	EAST, 
	WEST
}